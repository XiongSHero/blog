(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(e,t,r){"use strict";r.r(t),t.default=[{title:"uploadPreview",path:"/posts/uploadPreview.html",strippedContent:'# 上传预览  ## 来源   >上传图片时，需要展示上传的图片。   ## 实现方式   >笔者才疏学浅，只知道2种实现方式。一种是FileReader，另一种是URL。   ```vue  <template>   <div class="audio_box">     <input type="file" @change="uploadFile" accept="image/gif,image/png,image/jepg">     <img :src="imgSrc" alt="">   </div>  </template>  <script>  export default {    data () {      return {        imgSrc: \'\'      };    },    methods: {      uploadFile (e) {        const file = e.target.files;        if (FileReader) {          const reader = new FileReader();          reader.readAsDataURL(file[0]);          reader.onload = (e) => {            this.imgSrc = e.target.result;          };        } else {          this.imgSrc = URL.createObjectURL(file[0]);        }      }    },    beforeDestroy () {      URL.revokeObjectURL(this.imgSrc);    }  };  <\/script>  ```  '},{title:"jQuery",path:"/posts/jQuery.html",strippedContent:"# jQuery简介  ## jQuery整体架构   >$就是jQuery的别称   ```js   (function (root) {      var jQuery = function() {        // return new jQuery(); 不可取，循环递归。        return new jQuery.prototype.init();      }      jQuery.prototype = {          init: function () {},          css: function () {}      }      jQuery.prototype.init.prototype = jQuery.prototype; // 共享原型      root.$ = root.jQuery = jQuery;   }(this));   ```  ## extend源码解析  >可以给jQuery和jQuery实例对象扩展属性。  ```js  (function (root) {      var jQuery = function() {        // return new jQuery(); 不可取，循环递归。        return new jQuery.prototype.init();      }      jQuery.fn = jQuery.prototype = {          init: function () {},          css: function () {}      }      jQuery.fn.extend = jQuery.extend = function () { // extend 方法依靠参数来判断是给jQuery（实例）还是给普通对象添加（覆盖）属性          var target = arguments[0] || {};          var len = arguments.length;          var i = 1;          var deep = false;          var option, name, copy, src, copyArray, clone;          if (typeof target !== 'boolean') { // 深浅拷贝的区分                      deep = target;                      target = arguments[1];                      i = 2;                  }          if (typeof target !== 'object') {              target = {};          }          // 判断参数个数          if (len === i) {              target = this; // 给jQuery或者jQuery实例添加属性              i--;          }          // 浅拷贝          for (; len < i; i++) { // 第一个参数不用循环              if ((option = arguments[i]) != null) {                  for (name in option) {                      copy = option[name];                      src = target[name];                      if(deep && (jQuery.isPlainObject(copy) || copyArray = jQuery.isArray(copy))) {                          if(copyArray) {                              clone = src && jQuery.isArray(src) ? src : [];                          } else {                              clone = src && jQuery.isPlainObject(src) ? src : {};                          }                          target[name] = jQuery.extend(deep, clone, copy)                      } else if (copy != undefined) {                          target[name] = copy;                      }                  }              }          }          return target;      };      jQuery.fn.init.prototype = jQuery.prototype; // 共享原型      jQuery.extend({          isPlainObject: function(obj) {            return toString.call(obj) === '[object Object]';          },          isArray: function(obj) {                    return toString.call(obj) === '[object Array]';                  }      })      root.$ = root.jQuery = jQuery;   }(this));  ```  ## 选择器  >DOM对象是有宿主环境提供的对象，在文档对象模型中，每个部分都是节点。如：所有HTML元素都是元素节点，  而element对象标识HTML元素。&emsp;  jQuery对象是有jQuery构造函数创建出来的对象。  ```js  var rootjQuery = jQuery(document);  var rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;  jQuery.fn = jQuery.prototype = {          init: function (selector, context, root) {              var match, elem;              // $(\"\"), $(null), $(undefined), $(false)              if ( !selector ) {                      return this;              }              root = root || rootjQuery;              if ( typeof selector === \"string\" ) {                       if ( selector[ 0 ] === \"<\" &&                        selector[ selector.length - 1 ] === \">\" &&                        selector.length >= 3 ) { // 处理HTML字符串 '<div></div>'                                      match = [ null, selector, null ];                                    } else {                        match = rquickExpr.exec( selector ); // 匹配id选择器 ‘$('#div1')’                      }                                    if ( match && ( match[ 1 ] || !context ) ) {                                      // HANDLE: $(html) -> $(array)                        if ( match[ 1 ] ) {                          context = context instanceof jQuery ? context[ 0 ] : context;                                        // Option to run scripts is true for back-compat                          // Intentionally let the error be thrown if parseHTML is not present                          jQuery.merge( this, jQuery.parseHTML(                            match[ 1 ],                            context && context.nodeType ? context.ownerDocument || context : document,                            true                          ) );                                        // HANDLE: $(html, props)                          if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {                            for ( match in context ) {                                            // Properties of context are called as methods if possible                              if ( isFunction( this[ match ] ) ) {                                this[ match ]( context[ match ] );                                              // ...and otherwise set as attributes                              } else {                                this.attr( match, context[ match ] );                              }                            }                          }                                        return this;                                        // HANDLE: $(#id)                        } else {                          elem = document.getElementById( match[ 2 ] );                                        if ( elem ) {                                          // Inject the element directly into the jQuery object                            this[ 0 ] = elem;                            this.length = 1;                          }                          return this;                        }                                      // HANDLE: $(expr, $(...))                      } else if ( !context || context.jquery ) {                        return ( context || root ).find( selector );                                      // HANDLE: $(expr, context)                        // (which is just equivalent to: $(context).find(expr)                      } else {                        return this.constructor( context ).find( selector );                      }                                    // HANDLE: $(DOMElement)                    } else if ( selector.nodeType ) {                      this[ 0 ] = selector;                      this.length = 1;                      return this;                                    // HANDLE: $(function)                      // Shortcut for document ready                    } else if ( isFunction( selector ) ) {                      return root.ready !== undefined ?                        root.ready( selector ) :                                      // Execute immediately if ready is not present                        selector( jQuery );                    }                                  return jQuery.makeArray( selector, this );          },          css: function () {}      }  ```  "},{title:"npmCurrently",path:"/posts/npmCurrently.html",strippedContent:'# node启动多个服务  ## 来源  >基于自己做了个项目，前端和后台都有自己来做，前端使用Vue，后台使用了KOA。开发中每次，都要开启2个监听服务。并且在开发中要不断地切换项目。  很是麻烦。后来找了度娘，便把前端和后台放在了一个项目中，通过npm包concurrently来启动项目。  ## 使用  >首先要安装依赖  ```js  npm install concurrently --save-dev // npm install -g concurrently  ```  >在package.json中的scripts中  ```js  "start": "concurrently \\"node build/dev-server.js\\" \\"cd server && node index.js\\""  ```  '}]}}]);